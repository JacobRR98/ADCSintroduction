// Code for Processing IDE
import controlP5.*;
import processing.serial.*;

Serial myPort;
ControlP5 cp5;

// Sensor data
float[] accel = new float[3];  // X, Y, Z
float[] gyro = new float[3];   // X, Y, Z
float temperature = 0;
boolean connected = false;
boolean showGrid = true;

// 3D orientation
float rotX = 0;
float rotY = 0;
float rotZ = 0;

void setup() {
  size(1000, 600, P3D);
  surface.setTitle("MPU9250 Visualizer");
  
  // Initialize ControlP5
  cp5 = new ControlP5(this);
  setupGUI();
  
  // Setup serial connection
  println("\nAvailable Serial Ports:");
  String[] ports = Serial.list();
  for (int i = 0; i < ports.length; i++) {
    println("[" + i + "] " + ports[i]);
  }
  
  // Try to connect to COM7 (ESP32)
  try {
    myPort = new Serial(this, "COM7", 115200);
    myPort.bufferUntil('\n');
    myPort.clear();  // Clear any initial data
    delay(1000);     // Wait for connection to stabilize
    connected = true;
    println("Connected to COM7");
  } catch (Exception e) {
    println("Error connecting to COM7: " + e.getMessage());
    connected = false;
  }
}

void setupGUI() {
  // Main controls
  cp5.addButton("calibrate")
     .setPosition(20, 20)
     .setSize(100, 30)
     .setCaptionLabel("CALIBRATE");
     
  cp5.addButton("resetView")
     .setPosition(20, 60)
     .setSize(100, 30)
     .setCaptionLabel("RESET VIEW");
     
  cp5.addToggle("showGrid")
     .setPosition(20, 100)
     .setSize(50, 20)
     .setCaptionLabel("GRID")
     .setValue(true);
     
  // Reconnect button
  cp5.addButton("reconnect")
     .setPosition(20, height - 60)
     .setSize(100, 30)
     .setCaptionLabel("RECONNECT");
}

void draw() {
  background(32);
  lights();
  
  // Draw data panel
  drawDataPanel();
  
  // 3D visualization
  pushMatrix();
  translate(width/2, height/2, 0);
  
  // Draw reference grid
  if (showGrid) {
    drawGrid();
  }
  
  // Apply rotations
  rotateX(radians(rotX));
  rotateY(radians(rotY));
  rotateZ(radians(rotZ));
  
  // Draw MPU9250 board
  stroke(255);
  fill(200, 0, 0);
  box(100, 10, 150);
  
  // Draw axes
  stroke(255, 0, 0); line(0, 0, 0, 100, 0, 0);  // X axis
  stroke(0, 255, 0); line(0, 0, 0, 0, 100, 0);  // Y axis
  stroke(0, 0, 255); line(0, 0, 0, 0, 0, 100);  // Z axis
  
  popMatrix();
}

void drawGrid() {
  stroke(128, 128, 128, 64);
  for (int i = -200; i <= 200; i += 50) {
    line(i, -200, 0, i, 200, 0);
    line(-200, i, 0, 200, i, 0);
  }
}

void drawDataPanel() {
  fill(255);
  textAlign(LEFT);
  textSize(14);
  
  // Accelerometer data
  text("Accelerometer (g):", 20, 160);
  text(String.format("X: %.3f", accel[0]), 30, 180);
  text(String.format("Y: %.3f", accel[1]), 30, 200);
  text(String.format("Z: %.3f", accel[2]), 30, 220);
  
  // Gyroscope data
  text("Gyroscope (°/s):", 20, 250);
  text(String.format("X: %.3f", gyro[0]), 30, 270);
  text(String.format("Y: %.3f", gyro[1]), 30, 290);
  text(String.format("Z: %.3f", gyro[2]), 30, 310);
  
  // Temperature
  text(String.format("Temperature: %.1f°C", temperature), 20, 340);
  
  // Connection status with color
  fill(connected ? color(0, 255, 0) : color(255, 0, 0));
  text("Connection: " + (connected ? "Connected" : "Disconnected"), 20, height - 30);
}

void serialEvent(Serial port) {
  try {
    String input = port.readStringUntil('\n').trim();
    if (input.startsWith("DATA")) {
      String[] values = split(input.substring(5), ',');
      if (values.length >= 7) {
        // Update accelerometer data
        for (int i = 0; i < 3; i++) {
          accel[i] = float(values[i]);
        }
        // Update gyroscope data
        for (int i = 0; i < 3; i++) {
          gyro[i] = float(values[i + 3]);
        }
        // Update temperature
        temperature = float(values[6]);
        
        // Update rotation (simple integration)
        rotX += gyro[0] * 0.05;  // 50ms update rate
        rotY += gyro[1] * 0.05;
        rotZ += gyro[2] * 0.05;
      }
    }
  } catch (Exception e) {
    println("Error parsing data: " + e.getMessage());
  }
}

// GUI callbacks
void calibrate() {
  if (connected) {
    myPort.write('c');
    println("Sending calibration command");
  }
}

void resetView() {
  rotX = 0;
  rotY = 0;
  rotZ = 0;
}

void reconnect() {
  try {
    if (myPort != null) {
      myPort.stop();
    }
    myPort = new Serial(this, "COM7", 115200);
    myPort.bufferUntil('\n');
    myPort.clear();
    delay(1000);
    connected = true;
    println("Reconnected to COM7");
  } catch (Exception e) {
    println("Reconnection failed: " + e.getMessage());
    connected = false;
  }
}

void keyPressed() {
  switch(key) {
    case 'r':
    case 'R':
      resetView();
      break;
    case 'c':
    case 'C':
      calibrate();
      break;
    case 'g':
    case 'G':
      showGrid = !showGrid;
      cp5.getController("showGrid").setValue(showGrid ? 1 : 0);
      break;
  }
}
